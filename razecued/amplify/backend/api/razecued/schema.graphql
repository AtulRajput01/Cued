type Events
  @model
  @auth(rules: [
    { allow: private, operations: [read, create, update, delete] } # Allow only authenticated users (owners) to read, create, update, and delete events
  ]) {
  id: ID!
  eventName: String!
  eventOrganizer: String!
  eventDescription: String
  eventPoster: String!
  eventDate: AWSDate!
  registrationStatus: Boolean!
  popularity: Int
  collegeName: String!
  eventLocation: String!
  Users: [EventUser] @connection(name: "EventsUsers")
}

type Users
  @model
  @auth(rules: [
    { allow: private, operations: [read, create, update, delete] } # Allow only authenticated users (owners) to read, create, update, and delete users
  ]) {
  id: ID!
  user_collId: String!
  user_collName: String!
  user_passYear: AWSDate!
  user_age: Int!
  user_gender: String!
  user_phone: AWSPhone!
  user_altPhone: AWSPhone
  Events: [EventUser] @connection(name: "EventsUsers")
}

type EventUser
  @model
  @auth(rules: [
    { allow: private, operations: [read, create, update, delete] } # Allow only authenticated users (owners) to read, create, update, and delete associations
  ])
  @key(fields: ["eventId", "userId"])
  {
  id: ID!
  eventId: ID!
  userId: ID!
  eventSecurityGroup: String!
  userSecurityGroup: String!
}

